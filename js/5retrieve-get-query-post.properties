Node-WPAPI is a flexible, fluent client for the WordPress REST API
that works both on the server and in the browser.
It lets you easily filter and query WordPress for specific data,
create or update content within your WordPress database, and more.

// Bootstraps
var WPAPI = require ( 'wpapi' );

const config = require('../json/config.json');

var wp = new WPAPI({
    endpoint: window.WP_API_Settings.endpoint,
    nonce: window.WP_API_Settings.nonce
});

var wp = new WPAPI({
    endpoint : config.endpoint,
    username : config.username,
    password : config.password,
    auth : true
});

// any set global variable can be used to
// set their properties e.g const or var meti = 20
// title : '${meti}'

wp.posts().get().then(function (data) {
    console.log(data.id);
    // do something with returned data
}).catch(function (err) {
    console.error(err);
})

// data holds all properties of the fetched object
// fetch object // then do something with its response // catch error


BASIC AUTHENTICATION = {

This library currently supports basic HTTP authentication. To authenticate with your WordPress install,

    Download and install the Basic Authentication handler plugin on your target WordPress site.
    Activate the plugin.
    Specify the username and password of an authorized user
    (a user that can edit_posts) when instantiating the WPAPI request object:

var wp = new WPAPI({
    endpoint: 'http://www.website.com/wp-json',
    username: 'someusername',
    password: 'thepasswordforthatuser'
});

Now any requests generated from this WPAPI instance will use that username
and password for basic authentication if the targeted endpoint requires it.

As an example, wp.users().me() will automatically enable authentication to
permit access to the /users/me endpoint.
(If a username and password had not been provided, a 401 error would have been returned.)

Authenticate all requests for a WPAPI instance

It is possible to make all requests from a WPAPI instance use authentication
by setting the auth option to true on instantiation:

var wp = new WPAPI({
    endpoint: // ...
    username: // ...
    password: // ...
    auth: true
});

SECURITY WARNING

Please be aware that basic authentication sends your username and password over the wire,
in plain text. We only recommend using basic authentication in production
if you are securing your requests with SSL.

More robust authentication methods will hopefully be added; we would welcome contributions in this area!

}

COOKIE AUTHENTICATION = {
When the library is loaded from the frontend of the WordPress site you are querying against,
you may authenticate your REST API requests using the built in WordPress Cookie authentication
by creating and passing a Nonce with your API requests.

First localize your scripts with an object with root-url and nonce in your theme’s functions.php or your plugin:

function my_enqueue_scripts() {
    wp_enqueue_script( 'app', get_template_directory_uri() . '/assets/dist/bundle.js', array(), false, true );
    wp_localize_script( 'app', 'WP_API_Settings', array(
        'root' => esc_url_raw( rest_url() ),
        'nonce' => wp_create_nonce( 'wp_rest' )
    ) );
}
add_action( 'wp_enqueue_scripts', 'my_enqueue_scripts' );

And then use this nonce when initializing the library:

var WPAPI = require( 'wpapi' );
var wp = new WPAPI({
    endpoint: window.WP_API_Settings.endpoint,
    nonce: window.WP_API_Settings.nonce
});
}

AUTO-DISCOVERY ={

It is also possible to leverage the capability discovery features of the API
to automatically detect and add setter methods for your custom routes, or routes added by plugins.

To utilize the auto-discovery functionality, call WPAPI.discover()
with a URL within a WordPress REST API-enabled site:

var apiPromise = WPAPI.discover( 'http://my-site.com' );

If auto-discovery succeeds this method returns a promise that will be
resolved with a WPAPI client instance object configured specifically for your site.
You can use that promise as the queue that your client instance is ready,
then use the client normally within the .then callback.

Custom Routes will be detected by this process, and registered on the client.
To prevent name conflicts, only routes in the wp/v2 namespace will be
bound to your instance object itself. The rest can be accessed through
the .namespace method on the WPAPI instance, as demonstrated below.

apiPromise.then(function( site ) {
    // If default routes were detected, they are now available
    site.posts().then(function( posts ) {
        console.log( posts );
    }); // etc

    // If custom routes were detected, they can be accessed via .namespace()
    site.namespace( 'myplugin/v1' ).authors()
        .then(function( authors ) { /* ... */ });

    // Namespaces can be saved out to variables:
    var myplugin = site.namespace( 'myplugin/v1' );
    myplugin.authors()
        .id( 7 )
        .then(function( author ) { /* ... */ });
});

AUTHENTICATING WITH AUTO-DISCOVERY = {

While using WPAPI.discover( url ) to generate the handler for your site gets you up and running quickly, it does not provide the same level of customization as instantiating your own new WPAPI object. In order to specify authentication configuration when using autodiscovery, chain a .then onto the initial discovery query to call the .auth method on the returned site object with the relevant credentials (username & password, nonce, etc):

var apiPromise = WPAPI.discover( 'http://my-site.com' ).then(function( site ) {
    return site.auth({
        username: 'admin',
        password: 'always use secure passwords'
    });
});
apiPromise.then(function( site ) {
    // site is now configured to use authentication
})

}

}

QUERIES = {
wp.posts() : get a collection of posts
wp.posts().id(n) : get the post with id of new
wp.posts().id( n ).revisions(): get a collection of revisions for the post with ID n
wp.posts().id( n ).revisions( rn ): get revision rn for the post with ID n

wp.pages(): get a collection of page items
wp.pages().id( n ): get the page with numeric ID n
wp.pages().path( 'path/str' ): get the page with the root-relative URL path path/str
wp.pages().id( n ).revisions(): get a collection of revisions for the page with ID n
wp.pages().id( n ).revisions( rn ): get revision rn for the page with ID n

wp.comments(): get a collection of all public comments
wp.comments().id( n ): get the comment with ID n

wp.categories(): retrieve all registered categories
wp.categories().id( n ): get a specific category object with id n

wp.tags(): retrieve all registered tags
wp.tags().id( n ): get a specific tag object with id n

wp.taxonomies(): retrieve all registered taxonomies
wp.taxonomies().taxonomy( 'taxonomy_name' ): get a specific taxonomy object with name taxonomy_name

}

CUSTOM TAXONOMY TERMS = {
Use registerRoute() or route auto-discovery to query for custom taxonomy terms

wp.types(): get a collection of all registered public post types
wp.types().type( 'cpt_name' ): get the object for the custom post type with the name cpt_name

wp.statuses(): get a collection of all registered public post statuses (if the query is authenticated—will just display “published” if unauthenticated);
wp.statuses().status( 'slug' ): get the object for the status with the slug slug


wp.users(): get a collection of users (will show only users with published content if request is not authenticated)
wp.users().id( n ): get the user with ID n (does not require authentication if that user is a published author within the blog)
wp.users().me(): get the authenticated user’s record


wp.media(): get a collection of media objects (attachments)
wp.media().id( n ): get media object with ID n

wp.settings(): get or update one or many site settings
}

GETTING THE URI OF A RESOURCE = { .toString()
var uriString = wp.posts().id( 7 ).embed().toString();
// As the name implies .toString() is not a chaining method,
// and will return a string containing the full URI;
// this can then be used with alternative HTTP transports like request, Node’s native http, fetch, or jQuery.

}

API QUERY PARAMETERS = {

.param;
// All posts by author w/ ID "7" published before Sept 22, 2016
wp.posts()
    .param( 'before', new Date( '2016-09-22' ) )
    .param( 'author', 7 )...;

// you can continue to chain the .param properties till we call
// either .get .create .update .delete .then on the request chain
    .then.get.create.update.delete
    }

PARAMETER SHORTCUT METHODS ={

This library provides convenience methods for many of the most common parameters,
like search= (search for a string in post title or content),
slug (query for a post by slug), and before and after (find posts in a given date range):

// Find a page with a specific slug
wp.pages().slug( 'about' )...

// Find a post authored by the user with ID = 42
wp.posts().author( 42 )...

// Find trashed posts
wp.posts().status( 'trash' )...

// Find posts in status "future" or "draft"
wp.posts().status([ 'draft', 'future' ])...

// Find all categories containing the word "news"
wp.categories().search( 'news' )...

// Find posts from March 2013 (provide a Date object or full ISO-8601 date):
wp.posts().before( '2013-04-01T00:00:00.000Z' ).after( new Date( 'March 01, 2013' ) )...

// Return ONLY sticky posts
wp.posts().sticky( true )...

// Return NO sticky posts
wp.posts().sticky( false )...

// Supply the password for a password-protected post
wp.posts().id( 2501 ).password( 'correct horse battery staple' )...

Paging & Sorting

Convenience methods are also available to set paging & sorting properties
like page, per_page (available as .perPage()), offset, order and orderby:

// perPage() sets the maximum number of posts to return. 20 latest posts:
wp.posts().perPage( 20 )...

// 21st through 40th latest posts (*i.e.* the second page of results):
wp.posts().perPage( 20 ).page( 2 )...

// Order posts alphabetically by title:
wp.posts().order( 'asc' ).orderby( 'title' )...
}

FILTERING BY TAXONOMY TERMS  = {

A variety of other methods are available to further modify
which posts are returned from the API. For example,
to restrict the returned posts to only those in category 7,
pass that ID to the .categories() method:

wp.posts().categories( 7 )...

Relationships in the REST API are always specified by ID.
The slug of a term may change, but the term ID associated with the underlying post will not.
}

To find the ID of a tag or category for which the slug is known, = {
you can query the associated collection with .slug() and use the ID of the returned object in a two-step process:

wp.categories().slug( 'fiction' )
    .then(function( cats ) {
        // .slug() queries will always return as an array
        var fictionCat = cats[0];
        return wp.posts().categories( fictionCat.id );
    })
    .then(function( postsInFiction ) {
        // These posts are all categorized "fiction":
        console.log( postsInFiction );
    });

To find posts in category ‘fiction’ and tagged either ‘magical-realism’ or ‘historical’,
this process can be extended: note that this example uses the RSVP.hash utility
for convenience and parallelism,
but the same result could easily be accomplished with Promise.all or by chaining each request.

RSVP.hash({
  categories: wp.categories().slug( 'fiction' ),
  tags1: wp.tags().slug('magical-realism'),
  tags2: wp.tags().slug('historical')
}).then(function( results ) {
    // Combine & map .slug() results into arrays of IDs by taxonomy
    var tagIDs = results.tags1.concat( results.tags2 )
        .map(function( tag ) { return tag.id; });
    var categoryIDs = results.categories
        .map(function( cat ) { return cat.id; });
    return wp.posts()
        .tags( tags )
        .categories( categories );
}).then(function( posts ) {
    // These posts are all fiction, either magical realism or historical:
    console.log( posts );
});

This process may seem cumbersome, but it provides a more broadly reliable method
of querying than querying by mutable slugs. The first requests may also be avoided
entirely by pre-creating and storing a dictionary of term slugs and
their associated IDs in your application; however, be aware that this
dictionary must be updated whenever slugs change.

It is also possible to add your own slug-oriented query parameters to a site that you control
by creating a plugin that registers additional collection parameter arguments.
}

EXCLUDING TERMS ={
Just as .categories() and .tags() can be used to return posts
that are associated with one or more taxonomies, two methods exist to exclude posts by their term associations.

.excludeCategories() is a shortcut for .param( 'categories_exclude', ... )
which excludes results associated with the provided category term IDs
.excludeTags() is a shortcut for .param( 'tags_exclude', ... )
which excludes results associated with the provided tag term IDs
}

RETREIVING POSTS FROM A SPECIFIC AUTHOR = {
The .author() method also exists to query for posts authored by a specific user (specified by ID).

// equivalent to .param( 'author', 42 ):
wp.posts().author( 42 ).get();

// last value wins: this queries for author == 71
wp.posts().author( 42 ).author( 71 ).get();

As with categories and tags, the /users endpoint may be queried by slug
to retrieve the ID to use in this query, if needed. }

OTHER FILTERS = {

The ?filter query parameter is not natively supported within the WordPress core REST API endpoints,
but can be added to your site using the rest-filter plugin.
filter is a special query parameter that lets you directly specify many WP_Query arguments,
including tag, author_name, and other public query vars.
Even more parameters are available for use with filter once you authenticate with the API.

If your environment supports this parameter,
other filtering methods will be available if you initialize your site using auto-discovery,
which will auto-detect the availability of filter:

WPAPI.discover( 'http://mysite.com' )
    .then(function( site ) {
        // Apply an arbitrary `filter` query parameter:
        // All posts belonging to author with nicename "jadenbeirne"
        wp.posts().filter( 'author_name', 'jadenbeirne' ).get();

        // Query by the slug of a category or tag
        // Get all posts in category "islands" and tags "clouds" & "sunset"
        // (filter can either accept two parameters, as above where it's called with
        // a key and a value, or an object of parameter keys and values, as below)
        wp.posts().filter({
            category_name: 'islands',
            tag: [ 'clouds', 'sunset' ]
        })...

        // Query for a page at a specific URL path
        wp.pages().filter( 'pagename', 'some/url/path' )..
    }); }

DATE FILTER METHODS = {

?before and ?after provide first-party support for querying by date,
but should you have access to filter then three additional date query methods
are available to return posts from a specific month, day or year:

.year( year ): find items published in the specified year
.month( month ): find items published in the specified month,
designated by the month index (1–12) or name (e.g. “February”)
.day( day ): find items published on the specified day
}

UPLOADING MEDIA = {

Files may be uploaded to the WordPress media library by creating a media record using the .media() collection handler.

The file to upload can be specified as

    a String describing an image file path, e.g. '/path/to/the/image.jpg'
    a Buffer with file content, e.g. new Buffer()
    a file object from a <input> element, e.g. document.getElementById( 'file-input' ).files[0]

The file is passed into the .file() method:

wp.media().file(content [, name])...

The optional second string argument specifies the file name to use for the uploaded media. If the name argument is omitted file() will try to infer a filename from the provided content.
Adding Media to a Post

If you wish to associate a newly-uploaded media record to a specific post, you must use two calls: one to first upload the file, then another to associate it with a post. Example code:

wp.media()
    // Specify a path to the file you want to upload, or a Buffer
    .file( '/path/to/the/image.jpg' )
    .create({
        title: 'My awesome image',
        alt_text: 'an image of something awesome',
        caption: 'This is the caption text',
        description: 'More explanatory information'
    })
    .then(function( response ) {
        // Your media is now uploaded: let's associate it with a post
        var newImageId = response.id;
        return wp.media().id( newImageId ).update({
            post: associatedPostId
        });
    })
    .then(function( response ) {
        console.log( 'Media ID #' + response.id );
        console.log( 'is now associated with Post ID #' + response.post );
    });

If you are uploading media from the client side, you can pass a reference to a file input’s file list entry in place of the file path:

wp.media()
    .file( document.getElementById( 'file-input' ).files[0] )
    .create()...
}

EMBEDDING DATA = {
Data types in WordPress are interrelated: A post has an author,
some number of tags, some number of categories, etc. By default,
the API responses will provide pointers to these related objects,
but will not embed the full resources: so, for example, the "author" property
would come back as just the author’s ID, e.g. "author": 4.

This functionality provides API consumers the
flexibility to determine when and how they retrieve the related data.
However, there are also times where an API consumer will want to get
the most data in the fewest number of responses.
Certain resources (author, comments, tags, and categories,
to name a few) support embedding, meaning that they can be
included in the response if the _embed query parameter is set.

To request that the API respond with embedded data, simply call .embed() as part of the request chain:

wp.posts().id( 2501 ).embed()…

This will include an ._embedded object in the response JSON, which contains all of those embeddable objects:

{
    "_embedded": {
        "author": [ /* ... */ ],
        "replies": [ /* ... */ ],
        "wp:attachment": [ /* ... */ ],
        "wp:term": [
            [ {}, {} /* category terms */ ],
            [ {} /* tag terms */ ],
            /* etc... */
        ],
        "wp:meta": [ /* ... */ ]
    }
}

}